unit DX7.Envelope;

interface

uses
  DX7.Config,
  FS1R.Params;

type
  TEnvState=(attack,decay,sustain,off);

  TEnvelopeDX7=record
  strict private
    Levels:^TLevels;
    Rates:^TRates;
    Params:PVoiceParams;
    Index:integer;
    Level:Double;
    down:Boolean;
    TargetLevel:integer;
    rising:boolean;
    procedure advance(newstate:integer);
  public
    state:integer;
    qr:integer;
    DecayIncrement:Double;
    CurrentOutput:Double;
    function Render:double;
    constructor Create(aIndex:TOperatorIndex;aParams:PVoiceParams);
    function isFinished:boolean;
    procedure noteOff;
  end;

// Level
//  7.00
//  3.37╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌####╌
//  9.74╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌########╌
//  6.11╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌###########╌
//  2.49╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌###############╌
//  8.86╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌##################╌
//  5.23╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌######################╌
//  1.60╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌##########################╌
//  7.97╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌#############################╌
//  4.34╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌#################################╌
//  0.71╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊#####################################╌
//  7.09╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌########################################╌
//  3.46╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌############################################╌
//  9.83╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊###############################################╌
//  6.20╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌###################################################╌
//  2.57╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌#######################################################╌
//  8.94╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌##########################################################╌
//  5.31╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌##############################################################╌
//  1.69╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌##################################################################╌
//  8.06╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌#####################################################################╌
//  4.43╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌#########################################################################╌
//  0.80╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌┊#############################################################################╌
//  7.17╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌###############################################################################╌
//  3.54╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌╌╌##################################################################################╌
//  9.91╌┊╌╌╌╌╌╌╌╌╌┊╌╌╌####################################################################################╌
//  6.29╌┊╌╌╌╌╌╌╌╌╌┊╌######################################################################################╌
//  2.66╌┊╌╌╌╌╌╌╌╌╌########################################################################################╌
//  9.03╌┊╌╌╌╌╌╌╌╌#########################################################################################╌
//  5.40╌┊╌╌╌╌╌╌###########################################################################################╌
//  1.77╌┊╌╌╌╌#############################################################################################╌
//  8.14╌┊╌╌╌##############################################################################################╌
//  4.51╌┊╌╌###############################################################################################╌
//  0.89╌┊╌╌###############################################################################################╌
//  7.26╌┊╌################################################################################################╌
//  3.63╌┊#################################################################################################╌
//  0.00╌##################################################################################################╌
//     ╌━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━
//       0        10        20        30        40        50        60        70        80        90
//                                                      Index
const outputlevelLookup: Array[T0_99] of byte = (0, 5, 9, 13, 17, 20, 23, 25, 27, 29, 31, 33, 35, 37, 39,
	41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127);

var outputLUT:array of double = [];


implementation

uses Math,SysUtils,Windows;

const
  ENV_OFF = 4;


constructor TEnvelopeDX7.Create(aIndex:TOperatorIndex;aParams:PVoiceParams);
begin
  Params := aParams;
  index := aIndex;
	levels := @Params.operators[Index].Voiced.EG.Envelope.Levels;
	rates := @Params.operators[Index].Voiced.EG.Envelope.Rates;
	level := 0; // should start here
	down := true;
	decayIncrement := 0;
	advance(0);
end;

function TEnvelopeDX7.render:double;
var lev:Double;
begin
	if (state < 3) or ((state < 4) and (not down)) then
  begin
		lev := level;
		if rising then
    begin
			lev := lev + (decayIncrement * (2 + (targetlevel - lev) / 256));
			if (lev >= targetlevel) then
      begin
				lev := targetlevel;
				self.advance(state + 1);
			end;
		end
    else
    begin
      // not rising
			lev := lev - decayIncrement;
			if (lev <= self.targetlevel) then
      begin
				lev := self.targetlevel;
				self.advance(self.state + 1);
			end;
		end;
		self.level := lev;
	end;
//	inc(i);

	// Convert DX7 level -> dB -> amplitude
	Result := outputLUT[Math.floor(self.Level)];
  CurrentOutput := Result;

//  OutputDebugString(pchar(Format('Envelope %g',[Result])));
end;

procedure TEnvelopeDX7.advance(newstate:integer);
var newlevel,rate_scaling:integer;
begin
	self.state := newstate;
	if (self.state < 4) then begin
		newlevel := self.levels[self.state];
		targetlevel := Math.max(0, (outputlevelLookup[newlevel] shl 5) - 224); // 1 -> -192; 99 -> 127 -> 3840
		rising := (self.targetlevel - self.level) > 0;
		rate_scaling := 0;
		self.qr := Math.min(63, rate_scaling + ((self.rates[self.state] * 41) shr 6)); // 5 -> 3; 49 -> 31; 99 -> 63
		self.decayIncrement := power(2, self.qr/4) / 2048;
    // console.log("decayIncrement (", self.state, "): ", self.decayIncrement);
	end;
  // console.log("advance state="+self.state+", qr="+self.qr+", target="+self.targetlevel+", rising="+self.rising);
end;

procedure TEnvelopeDX7.noteOff;
begin
	down := false;
	advance(3);
end;

function TEnvelopeDX7.isFinished:boolean;
begin
	Result := state = ENV_OFF;
end;

procedure Init;
var
  i:integer;
  db:double;
const
  cLutSize=4096;
begin
  setlength(outputLUT,cLutSize);
  for i := 0 to cLutSize-1 do
  begin
    dB := (i - 3824) * 0.0235;
    outputLUT[i] := power(20, (dB/20));
  end;
end;

initialization

init;


end.
